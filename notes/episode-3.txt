<-------------------episode 3 ---------------------->

find the script in package.json and  write some command into script block

script: {
    "start": 'parcel index.html'
    "build" : 'parcal build index.html'
}
npm start == npm run start

remove the code from app.js --- below code no longer with us---ðŸ˜¢

const parent = React.createElement('div', {id:'parent'}, [  React.createElement('div', { id: 'child' },
React.createElement('h1', {}, "I am H1 tag"), [React.createElement('h2', {}, "I am H2 tagðŸš€")
]),
 React.createElement('div', { id: 'child' },
React.createElement('h1', {}, "I am H1 tag"), [React.createElement('h2', {}, "I am H2 tag")
])



])

console.log(parent) 
const root = ReactDOM.createRoot(document.getElementById('root'))
root.render(parent) 



npm start ---------------------------->>>>>>>>
react element are similer to Dom element (The inspect elemnts -- All html)

JSX element creation -- Not html in js --ðŸ™„, its html like syntax (looks like)

JS engine not understand JSX --  it only understand JS (ES6)

** JSX code will transpiled(transformed) to react code by Parcel--(Pakage Babel) before its reaches the JS Engine** 

-- Babel is supporting pAckage in parsel------

JSX convert the things into React.createElemt ==> and react.createElement convert JS object and then  HtmlElement--
means JSX = react.createElement
for adding the clas attr -- we have to use "className"
const jsxHeading = <h1 className="heading"> Using JSX</h1>

if you have to add attribute into JSX you havew to use camelCase --
exam- 
1 -  className =""
2- tabIndex = ""

write the code into (),  that Babel can understand start and end of the code
const jsxHeading =(<h1 id="heading" className="heading"> Using JSX</h1>)


--------------------episode-3 --- 2nd part

REACT COMPONENTS
1- React class based components --  old practice
2-  React functional components --  New wayss

--  a function which is returning some JSX or , ReactElement(before its object after render is HTML) is Funtional component


Note ---  When using Funtional component always First letter will be "CAPITAL"
const Heading = ()=>{
    return <h1>Namastey React Functional Component</h1>;
}

sort handed----------
 
 const Heading = ()=><h1>Namastey React Functional Component</h1>;
 write multi html wrap it into () ===  const Heading = ()=>(<h1>Namastey React Functional Component</h1>);

 for render it to root we have to write
 root.render(<Heading />) ----------
 Babel raed < ABC />n treat as component-------------


// if we want to write Heading1 into Heding component----  
const Heading1 = () => {
  return (
    <div className="parent">
      <h1>Namastey React Functional Component</h1> 
    </div>
  );
};


const Heading = () => {
    return (
      <div className="parent">
        <Heading1 />
        <h1>Namastey React Functional Component</h1> 
      </div>
    );
  };

 root.render(<Heading />) 

 Important --- The above code is known as "COMPONENTS COMPOSITION"
COMPONENTS COMPOSITION ---  Render the component inside the another component


---- episode 3- last part--- 

in jsx code if we using  "{ }"  any where .. we can code JS inner that


const Heading = () => {
    return (
      <div className="parent">
      {.....  any JS LOGIC}
        <Heading1 />
        <h1>Namastey React Functional Component</h1> 
      </div>
    );
  };

  JSX prevent cross side scripting attacks--  its not blindly run the script inside the browser , its senetise it
--- code for laste episode
import React from "react";
import ReactDOM from "react-dom/client";

// const parent = React.createElement('div', {id:'parent'}, "JSX creation")

// JSX-----------

// episode 3
//react Functional components

// const Heading = ()=>{
//     return <h1>Namastey React Functional Component</h1>;
// }

// const Heading = ()=><h1>Namastey React Functional Component</h1>; // sort handed
// for multy html
const Heading1 = () => {
  return (
    <div className="parent">
      <h1>Namastey React Functional Component</h1> 
    </div>
  );
};

// if we want to write Heading1 into Heding component----  
const Heading = () => {
    return (
      <div className="parent">
        <Heading1 />
        <h1>Namastey React Functional Component</h1> 
      </div>
    );
  };
const root = ReactDOM.createRoot(document.getElementById("root"));
// root.render(heading);

root.render(<Heading />)

we can render Component inner component like this-- <Heading /> , <Heading></Heading>, {Heading()}

